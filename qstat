#!/bin/bash

usage () {
cat << EOF
Usage: qstat [OPTIONS] [JOBID1 JOBID2...|DESTINATION] [@SERVER]

This command provides a lightweight alternative to qstat. Data
are queried and updated every minute from the PBS job scheduler.
Options not listed here will be forwarded to the scheduler.
Please use those options sparingly.

Job IDs, if provided, should be numeric only and space delimited.
If a destination is provided, it should be a valid execution
queue on the chosen server. This cached version of qstat does not
allow mixed queries from multiple servers - only one server may
be specified per request.

Options:
    -h, --help      display this help and exit
    -l              disable labels (no header)
    -n              display a list of nodes at the end of the line
    -s              display administrator comment on the next line
    -S, --status    filter jobs by specific single-character status code
    -u, --user      filter jobs by the submitting user
    -w, --wide      use wide format output (120 columns)
    -x              include recently finished jobs in output
EOF
exit
}

# Function to load a server config (or site config if only one server)
function load_config {
    # Backward compatibility
    if [[ -n $QSCACHE_CONFIG ]]; then
        QSCACHE_SERVER=${QSCACHE_CONFIG%.*}
    fi

    if [[ ! -e $MYPATH/${QSCACHE_SERVER:=site}.cfg ]]; then
        echo -e "No site config found for qstat-cache. Bypassing cache ...\n" >&2

        # Try to find PBS qstat
        QSTATBIN=$(which --all qstat | tail -n1)
        export QSCACHE_RECURSION=true

        if [[ ! -z $QSTATBIN ]]; then
            QSCACHE_BYPASS=true
            BYPASS_REASON=nocfg
        else
            echo "Fatal: PBS qstat location could not be determined" >&2
            exit 1
        fi
    else
        source $MYPATH/${QSCACHE_SERVER}.cfg

        if [[ ! -d $DATAPATH ]]; then
            echo -e "Specified data path does not exist. Bypassing cache ...\n" >&2
            QSCACHE_BYPASS=true
            BYPASS_REASON=nodata
        else
            # If cache is missing or older than five minutes, warn and bypass
            CMD='cat $DATAPATH/updated' query_cache
            CACHETIME=$DATA
            CACHEAGE=$(expr $(date +%s) - $CACHETIME)

            if [[ $CACHEAGE -ge 300 ]]; then
                echo -e "Cached data is more than five minutes old. Bypassing cache ...\n" >&2
                QSCACHE_BYPASS=true
                BYPASS_REASON=olddata
            fi
        fi

        if [[ ${QSTATBIN}z == z ]]; then
            echo "Fatal: qstat location not specified" >&2
            exit 1
        fi
    fi
}

# Function to run a command on cache file, ensuring that cached file exists
function query_cache {
    while true; do 
        DATA=$(eval "$CMD; exit \${PIPESTATUS[0]}" 2>&1)

        if [[ $? == 0 ]]; then
            break
        elif [[ $SECONDS -gt $MAXWAIT ]]; then
            echo -e "Cache data search timeout. Bypassing cache ...\n" >&2
            $QSTATBIN $ARGLIST
            exit $?
        else
            if [[ ${QSCACHE_DEBUG^^} == true ]]; then
                echo -e "\nError at $(date):"
                echo "$DATA"
            fi

            sleep 1
        fi
    done
}

# Function to log usage (accepts argument for whether cached call or not)
function log_usage {
    if [[ -d $LOGPATH ]]; then
        TS=$(date '+%H.%M:%S') LOGFILE=$(whoami)-$(date +%Y%m%d).log
        printf "%-10s %-10s %-10s %-10s %-15s %s\n" $TS $HN $PPID "cache=$1" "$2" "$ARGLIST" >> $LOGPATH/$LOGFILE
    fi
}

# Avoid infinite recursion
if [[ $QSCACHE_RECURSION == true ]]; then
    echo "Fatal: PBS qstat location could not be determined" >&2
    exit 1
fi

# Read in site-config (make edits in that file)
SECONDS=0 DATAPATH= LOGPATH= MAXWAIT=60 QSTATBIN=
MYPATH=$(dirname $(readlink -f $0))

# Internal variables
JOBLIST= USERSTR= NOLABELS= CUSTOMSERVER=
ARGLIST="$*"
DATAFILE=joblist-default.dat
COPER="!="
AWKOPT=print
STATCODE=F
HN=$(hostname)

# Check for bypass setting
if [[ ${QSCACHE_BYPASS^^} == TRUE ]]; then
    load_config
    log_usage no "reason=manual"
    $QSTATBIN $ARGLIST
    exit $?
fi

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case "$1" in
        -h|--help)
            usage
            ;;
        -l)
            NOLABELS=TRUE
            ;;
		-n)
			DATAFILE=${DATAFILE/./-nodes.}
            DATAFILE=${DATAFILE/default/info}
            ;;
		-s)
            AWKOPT="for (i=1; i<=2; i++) {print; getline}"
            DATAFILE=${DATAFILE/job/comm}
            DATAFILE=${DATAFILE/default/info}
			;;
        -S|--status)
            STATCODE="$2"
            COPER="=="
            shift; ;;
        -u|--user)
            DATAFILE=${DATAFILE/default/info}
            USERSTR="$2"
            shift; ;;
        -w|--wide)
            DATAFILE=${DATAFILE/default/wide}
            DATAFILE=${DATAFILE/info/wide}
            ;;
        -x)
            STATCODE=
            ;;
		[0-9]*)
			if [[ -z "$JOBLIST" ]]; then
                JOBLIST="${1%%.*}"
            else
                JOBLIST="$JOBLIST|${1%%.*}"
            fi
			;;
        [a-zA-Z]*)
			if [[ -z "$JOBLIST" ]]; then
                DESTLIST="${1}"
            else
                DESTLIST="$DESTLIST|${1}"
            fi
			;;
        @*)
            CUSTOM_SERVER=${1:1}

            if [[ ! -f $MYPATH/${CUSTOM_SERVER}.cfg ]]; then
                >&2 echo "Error: $CUSTOM_SERVER is not a valid server"
                exit 1
            fi
            ;;
        *)
            if [[ -n $CUSTOM_SERVER ]] || [[ "$@" == *@* ]]; then
                >&2 echo "Error: option $1 is not available across servers"
                exit 1
            fi

            load_config

            if [[ ! -f $QSTATBIN ]]; then
                >&2 echo "Error: option $1 not supported on $HN"
                exit 1
            fi

            sleep 1
            log_usage no "reason=args"
            $QSTATBIN $ARGLIST
            exit $?
            ;;
	esac
    shift
done

# Load chosen server config
if [[ -n $CUSTOM_SERVER ]]; then
    QSCACHE_SERVER=$CUSTOM_SERVER
fi

load_config

if [[ $QSCACHE_BYPASS == true ]]; then
    log_usage no "reason=$BYPASS_REASON"
    $QSTATBIN $ARGLIST
    exit $?
fi

CMD="cat $DATAPATH/$DATAFILE"

# Set column IDs
if [[ $DATAFILE == *default* ]]; then
    UCOL=3 SCOL=5 DCOL=6
else
    UCOL=2 SCOL=10 DCOL=3
fi

if [[ $DATAFILE != *wide* ]]; then
    USERSTR=${USERSTR:0:8}
fi

# Attach various filters to output
if [[ ! -z "$STATCODE" ]]; then
    CMD="$CMD | awk '\$$SCOL && \$$SCOL $COPER \"$STATCODE\" && \$1 ~ /^[0-9]/ { $AWKOPT }'"
fi

if [[ ! -z "$USERSTR" ]] && [[ ${USERSTR^^} != ALL ]]; then
    CMD="$CMD | awk '\$$UCOL == \"$USERSTR\" { $AWKOPT }'"
fi

if [[ ! -z "$JOBLIST" ]]; then
    JOBLIST=${JOBLIST/\[\]/\\\[\\\]}
    CMD="$CMD | awk '\$1 ~ /^($JOBLIST)\./ { $AWKOPT }'"
fi

if [[ ! -z "$DESTLIST" ]]; then
    CMD="$CMD | awk '\$$DCOL ~ /^($DESTLIST)$/ { $AWKOPT }'"
fi

# Get requested output
query_cache

if [[ "${DATA}z" != z ]]; then
    if [[ -z $NOLABELS ]]; then
        if [[ $DATAFILE == *default* ]]; then
            echo "Job id            Name             User              Time Use S Queue"
            echo "----------------  ---------------- ----------------  -------- - -----"
        elif [[ $DATAFILE == *info* ]]; then
            echo "                                                            Req'd  Req'd   Elap"
            echo "Job ID          Username Queue    Jobname    SessID NDS TSK Memory Time  S Time"
            echo "--------------- -------- -------- ---------- ------ --- --- ------ ----- - -----"
        else
            echo "                                                                                                   Req'd  Req'd   Elap"
            echo "Job ID                         Username        Queue           Jobname         SessID   NDS  TSK   Memory Time  S Time"
            echo "------------------------------ --------------- --------------- --------------- -------- ---- ----- ------ ----- - -----"
        fi
    fi

    echo -e "$DATA"
    RVAL=0
else
    RVAL=1
fi

# Print cache age in debug mode
if [[ ${QSCACHE_DEBUG^^} == TRUE ]]; then
    echo -e "\nCached at: $(date -d @$CACHETIME)"
fi

log_usage yes
exit $RVAL
